skip_tags: true

version: '1.0.{build}/{branch}'

pull_requests:
  do_not_increment_build_number: true

build:
  verbosity: detailed

environment:
  matrix:
    - APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu
      compiler: gcc
      c_compiler: gcc
      cxx_compiler: g++
    - APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu
      compiler: clang
      c_compiler: clang
      cxx_compiler: clang++
    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
      compiler: msvc
      c_compiler: cl
      cxx_compiler: cl
    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
      compiler: clang
      c_compiler: clang-cl
      cxx_compiler: clang-cl

matrix:
  fast_finish: true

platform:
 # - x86
  - x64

configuration:
 # - Debug
  - Release

cache:
  - ..\deps -> .appveyor.yml

install:
  - cmd: echo %cd%
  - sh: pwd
  - cmd: set NINJA_URL="https://github.com/ninja-build/ninja/releases/download/v1.9.0/ninja-win.zip"
  - sh: export NINJA_URL="https://github.com/ninja-build/ninja/releases/download/v1.9.0/ninja-linux.zip"
  - cmd: set DEPS_DIR="%APPVEYOR_BUILD_FOLDER%\..\deps"
  - sh: export DEPS_DIR="${APPVEYOR_BUILD_FOLDER}\..\deps"

  - cmd: if not exist %DEPS_DIR% (
      mkdir %DEPS_DIR% &&
      cd %DEPS_DIR% &&
      appveyor DownloadFile %NINJA_URL% -FileName ninja.zip &&
      7z x ninja.zip -o%DEPS_DIR%\ninja > nul )

  - cmd: set BOOST_ROOT=C:\Libraries\boost_1_71_0
  - cmd: set NINJA_BIN=%DEPS_DIR%\ninja
  - cmd: set PATH=%NINJA_BIN%;%PATH%
  
  - sh: sudo apt update
  - sh: sudo apt install ninja-build

  - ninja --version
  - cmd: clang-cl -v
  - sh: gcc --version

before_build:
  - cmd: call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvars64.bat"
  - cmd: cd %APPVEYOR_BUILD_FOLDER%
  - sh: cd $APPVEYOR_BUILD_FOLDER
  - git submodule init
  - git submodule update

build_script:
  - nproc
  - mkdir build
  - cd build
  - ps: Write-Host "compilation with $env:c_compiler and $env:cxx_compiler"
  - ps: cmake .. -GNinja -DCMAKE_BUILD_TYPE="$env:configuration"
                     -DCMAKE_CXX_COMPILER="$env:cxx_compiler"
                     -DCMAKE_C_COMPILER="$env:c_compiler"
                     -DENABLE_TESTING=TRUE

  - ps: cmake --build . --config "$env:configuration" -j 2
  - ps: $to_deploy="bearsplate-win-$env:platform-$env:compiler.exe"
  - ps: Write-Host "to deploy $env:to_deploy"
  #- cmd: set to_deploy=bearsplate-win-%PLATFORM%-%COMPILER%.exe
  - cd bin
  - cmd: rename bearsplate.exe %to_deploy% 
  - sh: cmake --build . --config ${configuration} -j 2
  - sh: export to_deploy=bearsplate-linux-${PLATFORM}-${compiler}
  - sh: mv bearsplate $to_deploy

test_script:
  - ctest --output-on-failure -j 2

artifacts:
  - path: 'build/bin/$(to_deploy)'
    name: application

deploy:
  release: bearsplate-v$(APPVEYOR_BUILD_VERSION)
  description: 'Release bearsplate-v$(APPVEYOR_BUILD_VERSION)'
  provider: GitHub
  auth_token:
    secure: 6sWJttUxwB1HzKovRfV2uEx7bTNdSP/g9X4cupAFmM0J3SQvd+nddSMLXJW7R/vC
  artifact: application
  draft: false
  prerelease: false
  force_update: true
  on:
    branch: ubuntu
    CONFIGURATION: Release
    APPVEYOR_REPO_TAG: false
